#!/bin/python3

# TODO make this work without using Xresources
from argparse import ArgumentParser
from glob import glob
from sys import exit
from os import environ
from os.path import join, realpath, dirname

SOURCE = join(dirname(realpath(__file__)), "colours.txt")
FILES = ["termite.ini", "Xresources", "i3/init.conf", "i3/status.conf"]
OUTDIR = environ["DOT"]


parser = ArgumentParser(description="Fill configuration files with specified colour values")
parser.add_argument("-v", "--verbose", action="store_true", help="Show more text")
parser.add_argument("-e", "--headerend", default=" --- (TEMPLATE) ---",
                    help="String that line must end with to indicate template files")
parser.add_argument("-c", "--comment", default="#",
                    help="Lines to disregard within the source file")
parser.add_argument("-s", "--source", default=SOURCE,
                    help="File that colours will be sourced from")
parser.add_argument("-d", "--outdir", default=OUTDIR,
                    help="Directory to output filled templates to")
parser.add_argument("files", default=FILES, nargs="*",
                    help="Files to insert color values into. "
                         "Values of the form '{name}' will be replaced if 'name'"
                         " was stored in source file")

def get_colours(source, comment_marker):
  colours = {}
  vprint("Retrieving colours from '{}'...".format(source))
  with open(source) as f:
    i = 0
    for line in f:
      if line.strip() and not line.startswith(comment_marker):
        colour, code = line.strip().split()
        colours[colour] = code
        # First 16 colours are saved as Xresources values
        if i < 16:
          colours["color{}".format(i)] = code
          i += 1

  vprint("Colours:", *colours.keys())
  return colours


def write_colours(path, colours, headerend, outdir):
  from string import Template
  from os.path import join

  vprint("Filling '{}' template...".format(path))

  outpath = join(outdir, path)

  # Check we're not overwriting a template file
  try:
    with open(outpath) as out:
      if out.readline().endswith(headerend):
        exit("'{}' is a template file. Aborting.".format(outpath))
  except FileNotFoundError:
    pass    # Means we can write to it without worrying

  with open(path) as source:
    with open(outpath, "w") as out:
      # Deal with head
      first = source.readline().strip()
      if not first.endswith(headerend):
        exit("'{}' is not a template file. Aborting.".format(path))

      # Write other lines
      for line in source:
        out.write(Template(line).safe_substitute(colours))


if __name__ == "__main__":
  args = parser.parse_args()

  vprint = print if args.verbose else lambda *a, **k: None
  colours = get_colours(args.source,  args.comment)
  for path in args.files:
    write_colours(path, colours, args.headerend, args.outdir)
