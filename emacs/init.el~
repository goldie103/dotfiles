;;; init.el --- Kelly Stewart's init file
;;; Commentary:
;; TODO aspell messages
;; TODO reorder into load order
;; DOING add :defer and :demand keywords correctly
;; DOING fix evil bindings
;; DOING move helm packages into the specific package
;; DOING fixme todo highlight
;;; Code:
;; * setup
;; ** constants
(defconst my-dir (expand-file-name  ".user/" user-emacs-directory))
(defconst my-dir-elisp (expand-file-name "my-elisp" user-emacs-directory))
(defconst my-dir-packages (concat user-emacs-directory "elisp/"))

(defconst my-font-proportional "Input Sans Condensed")
(defconst my-font-mono "Input Mono Condensed")
(defconst my-font-header "Fantasque Sans Mono")

;; ** package
(require 'package)
(setq package-enable-at-startup nil         ; we will manually initialize
      load-prefer-newer t                   ; don't load outdated byte code
      package-archives
      (append package-archives
              '(("melpa" . "http://melpa.milkbox.net/packages/")
                ("org" . "http://orgmode.org/elpa/")
                ("elpy" . "http://jorgenschaefer.github.io/packages/"))))
(package-initialize)                    ; manually initialize
(add-to-list 'load-path my-dir-packages) ; location for non-MELPA packages

;; ** use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
(with-eval-after-load 'use-package
  (setq use-package-verbose t             ; log message after loading a package
        use-package-always-ensure t))     ; ensure all packages are installed

;; ** global bindings
(bind-keys
 ("<help> M-i" . info)
 ("RET" . newline-and-indent)
 ;; window movement
 ("C-l" . other-window)
 ("C-h" . other-frame)
 ;; scrolling
 ("C-k" . scroll-down)
 ("C-j" . scroll-up))

;; * custom commands
;; ** sass-watch
(defun my-sass-watch ()
  "Start a sass process with `sass --watch' watching the current buffer."
  (interactive)
  (let ((sass-location "sass")
        (output-dir "../"))
    (shell-command
     (format
      "%s --watch '%s':'%s%s.css'&"
      sass-location
      buffer-file-name
      (or output-dir "")
      (file-name-nondirectory (file-name-sans-extension buffer-file-name))))))

;; ** highlight-fic
(defface font-lock-fic-face
  '((((class color))
     (:background "white" :foreground "red" :weight bold))
    (t (:weight bold)))
  "Face to fontify FIXME/TODO words")

(defun my-highlight-fic ()
  "Highlight FIXME and TODO."
  (font-lock-add-keywords
   nil '(("\\(FIXME\\|TODO\\|DOING\\)?" . 'font-lock-fic-face))))

(add-hook 'prog-mode-hook #'my-highlight-fic)

;; ** append-to-list
;; http://stackoverflow.com/questions/24356401/how-to-append-multiple-elements-to-a-list-in-emacs-lisp
(defun my-append-to-list (list-var elements)
  "Add to the end of LIST-VAR each item in ELEMENTS.

Return the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
  (symbol-value list-var))

;; ** bury-scratch-buffer
(defun my-bury-scratch-buffer ()
  "If current buffer is *scratch*, bury it and return nil."
  (if (equal (buffer-name) "*scratch*") (progn (bury-buffer) nil) t))

;; ** font-use-proportional
(defmacro my-font-use-proportional ()
  "Set current buffer's font to `my-font-proprortional'."
  (interactive)
  (face-remap-add-relative 'default :family my-font-proportional :height 100))

;; ** compile-close-if-success
(defun my-compile-close-if-success (buf result)
  "Close compilation window for BUF if RESULT is successful."
  (let ((win (get-buffer-window buf 'visible)))
    (when (and win (not (string-match ".*exited abnormally.*" result)))
      (delete-window win))))

;; ** cleanup
(defun my-cleanup ()
  "Perform a lot of stuff on whitespace."
  (interactive)
  (untabify (point-min) (point-max))       ; tabs are evil
  (indent-region (point-min) (point-max))  ; indent properly
  (whitespace-cleanup))                    ; whitespace stuff

;; ** english-count-lines
(defun my-english-count-lines ()
    "Count screen lines in a region with handwriting font activated."
    (interactive)
    (let ((handwriting '(:family "Kelly Normal" :height 220)))
      (unless (member `(default ,handwriting default) face-remapping-alist)
        (face-remap-add-relative 'default handwriting))
      (message "%s" (count-screen-lines (region-beginning) (region-end)))
      (face-remap-remove-relative
       (face-remap-add-relative 'default handwriting))))

;; ** minibuffer-keyboard-quit
;; https://github.com/davvil/.emacs.d/blob/master/init.el
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

;; ** writeroom-effect
(defun my-writeroom-effect ()
  "Apply effects designed for distraction-free writing for prose.
Can be used outside writeroom mode."
  (interactive)
  (display-time-mode t)
  (display-battery-mode t)
  (which-function-mode -1)
  (size-indication-mode -1)
  ;; (nyan-mode nil) ; may not be needed with modeline format
  (setq mode-line-format
        '("%e"
          mode-line-front-space
          mode-line-frame-identification
          mode-line-buffer-identification
          sml/pre-modes-separator
          mode-line-modes
          mode-line-misc-info
          mode-line-end-spaces)))
;; * basic settings
;; ** settings
(add-to-list 'compilation-finish-functions #'my-compile-close-if-success)
(add-to-list 'kill-buffer-query-functions #'my-bury-scratch-buffer)

(setq
 browse-url-browser-function #'browse-url-generic
 browse-url-generic-program "firefox"
 vc-handled-backends '(SVN Git)          ; remove unnecessary backends
 read-file-name-completion-ignore-case t ; ignore case in completions
 sentence-end-double-space nil           ; double space is dumb
 tab-always-indent nil                   ; tab inserts a character
 smooth-scroll-margin 3                  ; fewer lines visible at buffer ends
 save-interprogram-paste-before-kill t   ; save clipboard to kill-ring
 kill-do-not-save-duplicates t           ; no duplicates in kill-ring
 line-move-visual t                      ; visual line movement
 ;; builtin
 user-full-name "Kelly Stewart"
 user-mail-address "stewart.g.kelly@gmail.com" ; manually define email address
 frame-title-format "%b - emacs"               ; buffer name as frame title
 window-combination-resize t                   ; use proportional window resize
 echo-keystrokes 0.1                    ; echo unfinished commands faster
 x-underline-at-descent-line t          ; draw underline lower
 ring-bell-function 'ignore             ; alarms
 delete-by-moving-to-trash t            ; use system trash for deletion
 tab-width 4                            ; tabs with width 4
 ;; startup
 initial-major-mode 'text-mode          ; scratch text mode
 inhibit-startup-screen t               ; no start screen
 initial-scratch-message nil)           ; no scratch message

(setq-default indent-tabs-mode nil      ; turn tabs to spaces
              fill-column 79)           ; recommended text width

(fset 'yes-or-no-p #'y-or-n-p)          ; less annoying
(defun display-startup-echo-area-message () "Remove dumb start message." nil)

;; *** windows
(when (eq system-type 'windows-nt)
  (setq w32-apps-modifier 'hyper
        ;; Super is Windows key
        ;; Taken mappings: s-l s-r
        w32-lwindow-modifier 'super
        w32-pass-lwindow-to-system nil))

;; ** fonts
;; TODO get this to actually work
(setq face-font-family-alternatives
      '(("Monospace"
         "InputMonoCondensed" "Input Mono Condensed" "InputMono" "Input Mono"
         "Consolas" "DejaVu Sans Mono" "courier" "CMU Typewriter Text" "fixed")
        ("Sans Serif"
         "InputSansCondensed" "Input Sans Condensed" "InputSans" "Input Sans"
         "Calibri" "DejaVu Sans" "helv" "helvetica" "arial" "fixed")
        ("Fantasque Sans Mono" "FantasqueSansMono"
         "InputSans" "Input Sans"
         "InputSansCondensed" "Input Sans Condensed")))

(set-face-attribute 'variable-pitch nil :family "InputSansCondensed" :height 100)
(set-face-attribute 'default nil :family my-font-mono :height 80)

;; ** modes
;; *** global
(mouse-wheel-mode t)                    ; Mouse wheel enabled
(goto-address-mode t)                   ; Highlight and buttonize URLs
(file-name-shadow-mode t)               ; Dim expanded filename parts
(show-paren-mode t)                     ; Highlight matching parens
(electric-indent-mode t)                ; Auto indent
(electric-pair-mode t)                  ; Auto add parens
(global-prettify-symbols-mode t)        ; Pretty symbols

;; we don't need no stinkin GUI
(size-indication-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)
(unless (display-graphic-p) (menu-bar-mode -1)) ; disable menu bar in terminal

;; *** prog-mode
(dolist (func '(hl-line-mode
                column-number-mode
                line-number-mode))
  (add-hook 'prog-mode-hook func))

;; *** text-mode
(dolist (func '(visual-line-mode
                visual-fill-column-mode))
  (add-hook 'text-mode-hook func))

;; * load first
;; ** custom
(use-package cus-edit :ensure nil :defer t
  :init
  (setq custom-file (expand-file-name "custom.el" my-dir)
        custom-unlispify-tag-names nil
        custom-unlispify-menu-entries nil)
  (load custom-file 'no-error 'no-message)) ; load custom file

;; ** TODO delight
(use-package delight :demand t
  :config
  (delight '((emacs-lisp-mode "Elisp" :major) ; TODO
             (visual-line-mode)
             (auto-fill-mode "φ"))))

;; ** evil
(use-package evil :demand t             ; Vim keybindings and modal editing
  ;; *** evil/init
  :init
  (setq
   evil-want-fine-undo nil          ; undo insertions in single steps
   evil-want-C-w-in-emacs-state t   ; prefix window commands with C-w
   evil-want-change-word-to-end nil ; don't let cw behave like ce
   evil-echo-state nil              ; state is in the modeline anyway
   evil-ex-substitute-global t)     ; global substitutions by default

  ;; *** evil/config
  :config
  (my-append-to-list 'evil-emacs-state-modes
                     '(shell-mode
                       term-mode
                       multi-term-mode))

  (evil-set-initial-state 'git-commit-mode 'insert)
  (evil-set-initial-state 'package-menu-mode 'motion)
  (evil-mode t)
  ;; **** evil/helper functions
  ;; ***** maybe-exit
  ;; Adapted from https://zuttobenkyou.wordpress.com/2011/02/15/some-thoughts-on-emacs-and-vim/
  (evil-define-command maybe-exit ()
    "Exit insert mode and mark buffer modified on insertion of a two-key
command. Uses jk as default combination."
    :repeat change
    (interactive)
    (let ((modified (buffer-modified-p))
          (first-char "j")
          (second-char ?k))
      (insert first-char)
      (let ((evt (read-event nil nil 0.5)))
        (cond
         ((null evt) (message ""))
         ((and (integerp evt) (char-equal evt second-char))
          (delete-char -1)
          (set-buffer-modified-p modified)
          (push 'escape unread-command-events))
         (t (setq unread-command-events (append unread-command-events
                                                (list evt))))))))

  ;; ***** my-evil-yank-to-eol
  (evil-define-command my-evil-yank-to-eol ()
    "Call `evil-yank' with point to end of line."
    (evil-yank (point) (point-at-eol)))

  ;; **** evil/packages
  ;; ***** evil-surround
  (use-package evil-surround :config (global-evil-surround-mode t))

  ;; ***** evil-commentary
  (use-package evil-commentary          ; Manipulate comments
    :delight evil-commentary-mode
    :config (evil-commentary-mode t))

  ;; ***** evil-args
  (use-package evil-args :disabled t     ; Manipulate function arguments
    ;; cia - change inner argument
    ;; daa - delete an argument
    :init
    (add-hook 'emacs-lisp-mode-hook
              (lambda()(setq evil-args-delimiters '(" "))))
    (bind-keys :map (evil-normal-state-map evil-motion-state-map)
               ("L" . evil-forward-arg)
               ("H" . evil-backward-arg)
               ("ga" . evil-jump-out-args))

    (bind-key "a" #'evil-inner-arg evil-inner-text-objects-map)
    (bind-key "a" #'evil-outer-arg evil-outer-text-objects-map))

  ;; ***** evil-matchit
  (use-package evil-matchit             ; Manipulate tags
    :defines evilmi-may-jump-percentage
    :init (setq evilmi-may-jump-percentage nil) ; allow count usage
    :config
    (global-evil-matchit-mode t)
    (evil-define-key 'normal evil-matchit-mode-map
      "\"" 'evilmi-jump-items))

  ;; **** evil/bindings
  ;; ***** evil/bindings/insert replace
  (bind-keys :map (evil-insert-state-map evil-replace-state-map)
             ("j" . maybe-exit)) ; jk exits insert state

  ;; ***** evil/bindings/normal motion
  (bind-keys :map (evil-normal-state-map evil-motion-state-map)
             ("Y" . my-evil-yank-to-eol))         ; more consistent

  ;; ***** evil/bindings/normal motion visual
  (bind-keys
   :map (evil-normal-state-map evil-motion-state-map evil-visual-state-map)
   ("SPC" . execute-extended-command)
   ("<escape>" . keyboard-quit)
   ("q" . kill-buffer-and-window)       ; consistency with other Emacs buffers
   ("Q" . evil-record-macro)            ; Q replaces old q action
   ;; window movement
   ("C-h" . evil-window-left)
   ("C-j" . evil-window-down)
   ("C-k" . evil-window-up)
   ("C-l" . evil-window-right)
   ;; visual line movement
   ("j" . evil-next-visual-line)
   ("k" . evil-previous-visual-line)
   ("gj" . evil-next-line)
   ("gk" . evil-previous-line)
   ;; movement
   ("s" . evil-last-non-blank)
   ("a" . evil-first-non-blank)
   ("\"" . evil-jump-item))

  (bind-keys
   :prefix-map my-evil-leader
   :prefix ","
   :prefix-docstring ""
   :map (evil-normal-state-map evil-motion-state-map evil-visual-state-map)
   ("" . nil)
   ("f" . find-file)
   ("b" . list-buffers)
   ("w" . save-buffer)
   ("x" . eval-defun)
   ("X" . eval-region))

  ;; ***** evil/bindings/minibuffer
  ;; ESC quits the minibuffer
  (bind-keys :map (minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map
                   minibuffer-local-isearch-map)
             ("<escape>" . minibuffer-keyboard-quit))

  ;; *** evil/end
  )

;; ** helm
(use-package helm-config :ensure helm :demand t ; Fuzzy minibuffer completion
  :delight helm-mode
  :defines (helm-M-x-always-save-history
            helm-ff-search-library-in-sexp
            helm-ff-skip-boring-files
            helm-locate-fuzzy-match
            helm-semantic-fuzzy-match
            helm-completion-in-region-fuzzy-match
            helm-M-x-fuzzy-match
            helm-imenu-fuzzy-match)
  ;; *** helm/init
  :init (setq
         helm-command-prefix-key "C-c h"
         helm-move-to-line-cycle-in-source t ; cycle on buffer end
         helm-display-header-line nil        ; no header line
         helm-scroll-amount 5                ; scroll amount in other window
         helm-split-window-in-side-p t       ; split inside current window
         helm-M-x-always-save-history t      ; save history even on fail
         helm-ff-auto-update-initial-value t ; auto update when only one match
         helm-ff-file-name-history-use-recentf t ; use recentf
         helm-ff-search-library-in-sexp t        ; get library from functions
         helm-ff-skip-boring-files t             ; skip irrelevant files
         helm-findutils-search-full-path t  ; search in full path with shell
         helm-findutils-skip-boring-files t ; skip irrelevant files in shell
         ;; fuzzy matching everywhere
         helm-semantic-fuzzy-match t
         helm-completion-in-region-fuzzy-match t
         helm-locate-fuzzy-match t
         helm-buffers-fuzzy-matching t
         helm-M-x-fuzzy-match t
         helm-apropos-fuzzy-match t
         helm-lisp-fuzzy-completion t
         helm-imenu-fuzzy-match t
         helm-file-cache-fuzzy-match t
         helm-recentf-fuzzy-match t)

  ;; *** helm/config
  :config
  ;; *** helm/global bindings
  (bind-keys
   ;; Helm replacements
   ("M-x" . helm-M-x)
   ("M-s o" . helm-occur)
   ("C-y" . helm-show-kill-ring)
   ("C-x r i" . helm-register)
   ("C-x b" . helm-mini)
   ("C-x C-f" . helm-find-files)
   ("<help> l" . helm-locate-library)
   ("<help> C-a" . helm-apropos)
   ("<help> C-l" . view-lossage)
   ;; Additional Helm functions
   ("C-/" . helm-semantic-or-imenu)
   ("<help> C-r" . helm-info-at-point)
   ("<help> w" . helm-man-woman)
   ("<help> i" . helm-info-emacs)
   ("<help> I" . helm-info-elisp))

  ;; **** helm/packages
  ;; ***** helm-dash
  (use-package helm-dash                ; Language documentation viewer
    :init (setq
           helm-dash-browser-func 'eww
           helm-dash-docsets-path "~/.emacs.d/.user/docset")
    ;; :config
    ;; (add-hook 'python-mode-hook (lambda()
    ;;                               (setq-local helm-dash-docsets '("Python"))))
    )

  ;; ***** helm-descbinds
  (use-package helm-descbinds           ; Replacement for `describe-bindings'
    :init
    (setq helm-descbinds-window-style 'split-window)
    (helm-descbinds-mode t))

  ;; **** helm/bindings
  (bind-keys
   :map helm-map
   ("<C-S-up>" . helm-scroll-other-window)
   ("<C-S-down>". helm-scroll-other-window-down)
   ([tab] . helm-execute-persistent-action) ; execute action without closing
   ("C-z" . helm-select-action))            ; list actions

  ;; **** helm/evil
  (bind-keys
   :map (evil-normal-state-map evil-motion-state-map)
   ("SPC" . helm-M-x)
   (",b" . helm-mini)
   (",f" . helm-find-files)
   (",hy" . helm-show-kill-ring)
   (",hg" . helm-grep)
   (",hu" . helm-ucs)
   (",hc" . helm-colors)
   (",hr" . helm-resume))

  ;; **** helm/enable
  (helm-autoresize-mode t)
  (helm-mode t))

;; * demand
;; ** smart-mode-line
(use-package smart-mode-line :demand t  ; Better modeline
  :defines (sml/use-projectile-p
            sml/projectile-replacement-format)
  :init
  (setq
   sml/theme 'respectful
   sml/battery-format "%b%p[%t]"
   sml/full-mode-string " ⋯"           ; append this to modeline when full
   sml/shorten-mode-string ""          ; no indication for all modes displayed
   sml/mule-info nil                   ; don't show buffer encoding
   sml/use-projectile-p t              ; projectile file prefix takes precedent
   sml/projectile-replacement-format "[π:%s]") ; format for projectile prefixes
  :config
  (setq sml/replacer-regexp-list
	(append sml/replacer-regexp-list
		'(("^/media/user/" ":θ:")
		  (":θ:Documents/" ":Δ:")
		  (":Δ:work/" ":Σ:")
		  (":θ:dev/" ":δ:")
		  (":δ:dotfiles/" ":.:")
		  ("^:\\.:emacs/" ":.ε:"))))
  (sml/setup)
  ;; :confing
  ;; Probably a horrible hack, but allows using `smart-mode-line' regexp
  ;; replacers with `powerline' appearance, since `smart-mode-line-powerline'
  ;; doesn't provide theme-compliant colors.
  ;; (use-package powerline :config (powerline-default-theme))
  )

;; ** flycheck
(use-package flycheck :defer t          ; On-the-fly syntax checking
  :init
  (setq flycheck-mode-line
        '(:eval (replace-regexp-in-string
                 "FlyC" "Φ" (flycheck-mode-line-status-text)))
        flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (add-hook 'prog-mode-hook #'flycheck-mode)
  (add-hook 'sh-mode-hook (lambda() (flycheck-mode -1)))

  :config
  ;; *** helm-flycheck
  (use-package helm-flycheck
    :init
    (bind-key "C-c ! h" #'helm-flycheck flycheck-mode-map)
    (evil-define-key 'normal flycheck-mode-map ",!h" #'helm-flycheck))

  ;; *** flycheck-tip
  (use-package flycheck-tip             ; display errors by popup
    :config (flycheck-tip-use-timer 'verbose))

  ;; *** flycheck/evil
  (evil-define-key 'normal flycheck-mode-map
    ",!j" #'flycheck-next-error
    ",!k" #'flycheck-previous-error))


;; ** TODO nyan-mode
(use-package nyan-mode :demand t        ; Nyan cat scroll bar
  ;; TODO nyan music ☹
  :commands nyan-mode
  :functions my-turn-off-nyan-mode
  :init (setq-default nyan-wavy-trail t) ; TODO wavy nyan trail all the time
  :config
  (defun nyan-mode-turn-off () (nyan-mode -1))
  (nyan-mode t))

;; ** which-func
(use-package which-func :demand t       ; Modeline definition name
  :config
  (defun my-which-func-current ()
    "Return a formatted which-func string if possible, or nil if not."
    (-if-let (current (gethash (selected-window) which-func-table))
        (truncate-string-to-width
         (concat
          " ➤ "
          (replace-regexp-in-string "%" "%%" current))
         20 nil nil "⋯")
      nil))

  (setq which-func-format
        `((:propertize (:eval (my-which-func-current))
                       local-map ,which-func-keymap
                       face which-func
                       mouse-face mode-line-highlight)))
  (which-function-mode t))

;; ** winner
(use-package winner :demand t           ; Window configuration undo
  :bind (("s-j" . winner-undo)
         ("s-k" . winner-redo))
  :config (winner-mode t))

;; * builtins
;; ** files
(use-package files :ensure nil          ; File-related actions
  :init (setq
         require-final-newline t         ; newline at end of file
         large-file-warning-threshold 20000000 ; only warn at 20MB files
         find-file-visit-truename t            ; silently follow symlinks
         view-read-only t               ; view read-only files in view-mode
         ;; autosave file location
         auto-save-list-file-prefix (concat my-dir "autosaves/")
         auto-save-file-name-transforms `((".*" ,auto-save-list-file-prefix t))
         ;; backups
         backup-directory-alist `(("." . ,(expand-file-name "backups" my-dir)))
         backup-by-copying t            ; copy file into backup dir
         version-control t              ; add version numbers
         delete-old-versions t          ; delete old backups silently
         kept-old-versions 5            ; old versions to keep
         kept-new-versions 8)           ; new versions to keep
  :config (cd "~"))                     ; start in home dir

;; ** TODO git-commit-mode
(use-package git-commit-mode :defer t
  ;; :delight TODO
  :config
  (evil-define-key 'normal git-commit-mode-map
    ",w" #'git-commit-commit
    "q" #'git-commit-abort))

;; * tools
;; ** lorem-ipsum
(use-package lorem-ipsum :defer t)      ; Insert filler text

;; ** TODO magit
(use-package magit                      ; Git version control management
  :delight magit-auto-revert-mode
  :bind ("M-m" . magit-status)
  :init (setq
         magit-save-some-buffers 'dontask           ; don't ask before saving
         magit-last-seen-setup-instructions "1.4.0" ; clear startup message
         magit-diff-options '("-b"))    ; ignore whitespace in diffs
  :config
  ;; http://writequit.org/org/settings.html
  (defun magit-browse ()
    "Browse to the project's github URL, if available"
    (interactive)
    (let ((url (with-temp-buffer
                 (unless (zerop (call-process-shell-command
                                 "git remote -v" nil t))
                   (error "Failed: 'git remote -v'"))
                 (goto-char (point-min))
                 (when (re-search-forward
                        "github\\.com[:/]\\(.+?\\)\\.git" nil t)
                   (format "https://github.com/%s" (match-string 1))))))
      (unless url
        (error "Can't find repository URL"))
      (browse-url url)))

  (bind-keys :map magit-status-mode-map
             ("j" . next-line)
             ("k" . previous-line)
             ("<down>" . magit-goto-next-sibling-section)
             ("<up>" . magit-goto-previous-sibling-section)
             ("K" . magit-discard-item)
             (",b" . ibuffer)))

;; * faces
;; ** fic-ext
(use-package fic-ext-mode :disabled t   ; Highlight annotations in comments
  ;; TODO check this actually loads properly
  :load-path my-dir-packages :ensure nil
  :diminish fic-ext-mode
  :init
  (add-to-list 'fic-highlighted-words "FIXME?")
  (add-hook 'prog-mode-hook #'fic-ext-mode))

;; ** hl-sentence
(use-package hl-sentence :defer t       ; Highlight current sentence
  :init (add-hook 'text-mode-hook #'hl-sentence-mode)
  :config (set-face-attribute 'hl-sentence-face nil :inherit 'hl-line))

;; ** highlight-numbers
(use-package highlight-numbers          ; Highlight numbers
  :commands highlight-numbers--turn-on
  :init (add-hook 'prog-mode-hook #'highlight-numbers--turn-on))

;; ** page-break-lines
(use-package page-break-lines          ; Horizontal lines instead of ^L
  :delight page-break-lines-mode
  :functions global-page-break-lines-mode
  :config (global-page-break-lines-mode t))

;; ** rainbow-mode
(use-package rainbow-mode               ; Highlight color codes
  :commands rainbow-turn-on
  :delight rainbow-mode
  :init
  (dolist (hook '(web-mode-hook css-mode-hook))
    (add-hook hook #'rainbow-mode)))

;; ** whitespace
(use-package whitespace :defer t        ; Faces for whitespace characters
  :delight whitespace-mode
  :init
  (setq
   ;; modes to disable whitespace-mode
   whitespace-global-modes '(not org-mode
                                 eshell-mode
                                 shell-mode
                                 web-mode
                                 dired-mode)

   ;; clean whitespace on write and warn if readonly
   whitespace-action '(auto-cleanup warn-if-read-only)
   whitespace-line-column nil           ; use fill-column value
   whitespace-style '(face trailing lines-tail))
  (add-hook 'prog-mode-hook #'whitespace-mode))

;; ** writegood-mode
(use-package writegood-mode :defer t    ; Highlight poor forms in writing
  :delight writegood-mode
  :init (add-hook 'text-mode-hook #'writegood-mode)
  :config
  (my-append-to-list 'writegood-weasel-words '("thing" "different"))
  (bind-keys :map writegood-mode-map
             ("C-c M-w" . writegood-grade-level)
             ("C-c M-W" . writegood-reading-ease)))

;; ** color theme
(use-package solarized-theme :defer t
  :init (setq
         solarized-scale-org-headlines nil
         solarized-height-plus-1 1.0
         solarized-height-plus-2 1.0
         solarized-height-plus-3 1.0
         solarized-height-plus-4 1.0))

(use-package zenburn-theme :defer t)

(load-theme 'solarized-dark)

;; * interface
;; ** visual-fill-column
(use-package visual-fill-column
  :init
  (setq visual-fill-column-width 100)
  (add-hook 'text-mode-hook #'visual-fill-column-mode))

;; ** linum
(use-package linum :defer t             ; Line numbers
  :init (add-hook 'prog-mode-hook #'linum-mode)
  :config
  (defun linum-mode-turn-off () (linum-mode -1))
  (add-hook 'text-mode-hook #'linum-mode-turn-off))

;; ** popwin
(use-package popwin :demand t           ; Popup window for minor buffers
  :commands popwin-mode
  :init (setq popwin:popup-window-position 'right)
  :config
  (my-append-to-list 'popwin:special-display-config
                     '(("*Backtrace*" :noselect t)
                       ("*Python Help*" :stick t)
                       ("*Help*" :stick t)))
  (global-set-key (kbd "C-z") popwin:keymap) ; activate bindings
  (popwin-mode t))

;; ** TODO -golden-ratio
(use-package golden-ratio :disabled t :defer t ; Resize windows to golden ratio
  ;; TODO get this to play nice with Helm
  :delight golden-ratio-mode
  :init
  ;; http://writequit.org/org/settings.html
  (defun my-helm-alive-p ()
    (when (boundp 'helm-alive-p)
      (symbol-value 'helm-alive-p)))

  (setq
   ;; exclude helm
   golden-ratio-inhibit-functions #'my-helm-alive-p
   golden-ratio-exclude-modes '(helm-mode
                                magit-log-mode
                                magit-reflog-mode
                                magit-status-mode)
   golden-ratio-auto-scale t)           ; auto scale with screen size
  (golden-ratio-mode t))

;; ** TODO wc-mode
(use-package wc-goal-mode
  :init (add-hook 'text-mode-hook #'wc-goal-mode)
  :config
  (defun my-wc-format-toggle ()
    (interactive)
    (let ((a "wc:%tw%w") (b "lc:%tl%l"))
      (setq wc-goal-modeline-format (if (eql wc-goal-modeline-format a)
                                        b a)))))

;; ** writeroom-mode
(use-package writeroom-mode             ; Distraction-free writing mode
  :delight writeroom-mode " Σ"
  :bind ("C-q" . writeroom-mode)
  :config
  (setq writeroom-width 100)
  ;; Apply additional effects
  (add-hook 'writeroom-mode #'my-writeroom-effect))

;; * navigation
;; ** ace-jump-mode
(use-package ace-jump-mode              ; Jump to specific points with marks
  :bind ("C-SPC" . ace-jump-mode))

;; ** savehist
(use-package savehist                   ; Save command history
  :init
  (setq savehist-file (expand-file-name "savehist" my-dir)
        history-delete-duplicates t
        savehist-save-minibuffer-history t)
  (savehist-mode t))

;; ** saveplace
(use-package saveplace                  ; Save and restore cursor place in file
  :init (setq-default
         save-place-file (concat my-dir "places")
         save-place t))

;; ** expand-region
(use-package expand-region               ; Expand functions block at a time
  :bind ("C-=" . er/expand-region))

;; * help
;; ** discover-my-major
(use-package discover-my-major :defer t ; List current major mode bindings
  :bind ("<help> M-m" . discover-my-major))

;; ** guide-key
(use-package guide-key                  ; Delayed completion for possible keys
  :init
  (setq guide-key/recursive-key-sequence-flag t
        guide-key/guide-key-sequence '("C-x" "C-c" ","))
  (guide-key-mode t))

;; ** help+
(use-package help :ensure nil :defer t
  :config
  (use-package help+)
  (use-package help-fns+))

;; ** projectile
(use-package projectile                 ; Project-based navigation
  :commands (projectile-current-project-dirs
             projectile-project-p
             projectile-project-root)
  ;; *** projectile/init
  :init
  (setq
   projectile-globally-ignored-files '("TAGS" "*.odt" "*.docx" "*.doc")
   projectile-indexing-method 'alien    ; use faster OS methods
   ;; don't clutter my .emacs.d please
   projectile-cache-file (expand-file-name "projectile.cache" my-dir)
   projectile-known-projects-file (expand-file-name
                                   "projectile-known.eld" my-dir)
   ;; pretty Greek symbols
   projectile-mode-line '(:eval (format " π:%s" (projectile-project-name))))
  (projectile-global-mode t)
  ;; *** projectile/config
  :config
  (dolist (state '(normal visual motion))
    (evil-define-key state projectile-mode-map
      ",P" #'projectile-find-file
      ",pp" #'projectile-find-file-in-known-projects
      ",pf" #'projectile-find-file-dwim))

  ;; ***** helm-projectile
  (use-package helm-projectile
    :init
    (setq projectile-completion-system 'helm
          projectile-switch-project-action #'helm-projectile
          helm-projectile-fuzzy-match t)
    (helm-projectile-on)
    :config
    (dolist (state '(normal visual motion))
      (evil-define-key state projectile-mode-map
        ",P" #'helm-projectile
        ",pp" #'helm-projectile-find-file-in-known-projects
        ",pf" #'helm-projectile-find-file-dwim))))


;; * editing
;; ** abbrev
(use-package abbrev                     ; Auto-correct words after typing
  :delight abbrev-mode
  :init
  (setq abbrev-file-name (expand-file-name "abbrevs.el" my-dir)
        save-abbrevs 'silently          ; save abbrevs when saving file
        abbrev-all-caps t)              ; expand in all-caps if written in caps
  (abbrev-mode t))

;; ** TODO auto-indent-mode
(use-package auto-indent-mode           ; Automatic indentation
  ;; TODO get this working with indenting pasted code
  ;;      probably has something to do with Evil command hijacking
  :delight auto-indent-mode
  :init (auto-indent-global-mode t))

;; ** company
(use-package company                    ; Autocompletion in code
  :init
  (setq company-idle-delay 0            ; attempt completion immediately
        company-show-numbers t          ; allow M-num selection
        company-lighter-base "ψ"
        company-selection-wrap-around t)
  (add-hook 'prog-mode-hook #'company-mode)
  :config
  ;; ***** helm-company
  (use-package helm-company :defer t
    :init (bind-keys :map (company-mode-map company-active-map)
                     ("C-:" . helm-company)))

  (use-package company-web-html :ensure nil))

;; ** ispell
(use-package ispell
  :init
  (setq
   ;; regions not to check
   ispell-skip-region-alist
   (append ispell-skip-region-alist
           '((":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")
             ("#\\+BEGIN_SRC" . "#\\+END_SRC")
             ("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE")))

   ispell-silently-savep t              ; save without asking confirmation
   ispell-quietly t                     ; no messages please
   ispell-dictionary "british-ize"
   ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))

  ;; point to correct aspell path if on windows
  (when (eq system-type 'windows-nt)
    (setq ispell-program-name
          "C:\\Program Files (x86)\\Aspell\\bin\\aspell.exe"))

  :config
  ;; Adapted from http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
  (defun my-ispell-run-together (orig-func &rest args)
    "Use ispell --run-together options while ORIG-FUNC is being called."
    (let ((old-ispell-extra-args ispell-extra-args)
          (run-together-args '("--run-together"
                               "--run-together-limit=5"
                               "--run-together-min=2")))
      (ispell-kill-ispell t)
      (setq ispell-extra-args (append ispell-extra-args run-together-args))
      (apply orig-func args)
      (setq ispell-extra-args old-ispell-extra-args)
      (ispell-kill-ispell t)))

  (advice-add #'ispell-word :around #'my-ispell-run-together)

  ;; *** flyspell
  (use-package flyspell :defer t        ; On-the-fly spell checking
    :delight flyspell-mode " σ"
    :init
    ;; no messages
    (setq flyspell-issue-welcome-flag nil
          flyspell-issue-message-flag nil)

    (add-hook 'text-mode-hook #'flyspell-mode)
    :config
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)
    (advice-add #'flyspell-auto-correct-word :around #'my-ispell-run-together)

    ;; **** flyspell-lazy
    (use-package flyspell-lazy :defer t ; Lazier checking for words
      :init
      (add-hook 'flyspell-mode #'flyspell-lazy-mode)
      (add-hook 'flyspell-prog-mode #'flyspell-lazy-mode))

    ;; **** helm-flyspell
    (use-package helm-flyspell
      :init (evil-define-key 'normal flyspell-mode-map
              "z=" 'helm-flyspell-correct))))

;; ** outline
(use-package outline :ensure nil        ; Hierarchical outlining support
  :delight outline-minor-mode
  :init (add-hook 'prog-mode-hook #'outline-minor-mode)
  :config
  (bind-key "C-c o" #'outline-insert-heading outline-minor-mode-map)
  (evil-define-key 'normal outline-minor-mode-map
    "gh" #'outline-up-heading
    "gj" #'outline-next-heading
    "gk" #'outline-previous-heading
    "gl" #'outline-forward-same-level)
  ;; *** outline/outshine
  (use-package outshine                 ; Org-mode style with outline-mode
    :commands outshine-hook-function
    :init
    (setq outshine-org-style-global-cycling-at-bob-p t
          outshine-fontify-whole-heading-line t)
    (add-hook 'outline-minor-mode-hook #'outshine-hook-function)
    (bind-keys :map outline-minor-mode-map
               ("C-c h" . outline-promote)
               ("C-c l" . outline-demote)
               ("\t" . outline-cycle))))

;; ** smartparens
(use-package smartparens-config         ; Balanced paren management
  :ensure smartparens
  :delight smartparens-mode
  :bind ("M-=" . sp-indent-defun)
  :init
  (setq sp-show-pair-from-inside t)
  (smartparens-global-mode t)
  (show-smartparens-mode t)
  :config
  (bind-key "M-=" #'sp-indent-defun smartparens-mode-map)
  (sp-local-pair 'html-mode "<" ">")
  (add-hook 'smartparens-enabled-hook (lambda() (electric-pair-mode -1)))
  ;; *** evil-smartparens
  (use-package evil-smartparens         ; Evil smartparen bindings
    :delight evil-smartparens-mode
    :init
    (add-hook 'prog-mode-hook #'smartparens-strict-mode)
    (add-hook 'smartparens-strict-mode-hook #'evil-smartparens-mode)))

;; ** typo
(use-package typo :defer t              ; Insert typographical characters
  :delight typo-mode
  :init (add-hook 'text-mode-hook #'typo-mode))

;; ** undo-tree
(use-package undo-tree                  ; Branching undo tree
  :delight undo-tree-mode
  :init
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t
        undo-tree-auto-save-history t
        undo-tree-history-directory-alist
        `(("." . ,(expand-file-name "undo-history" my-dir))))
  (bind-key "C-x u" #'undo-tree-visualize undo-tree-map)
  (global-undo-tree-mode t))

;; ** yasnippet
(use-package yasnippet :defer t
  :init (setq yas-snippet-dirs
              `(,(expand-file-name "snippets/" my-dir)
                yas-installed-snippets-dir)))

;; ** ediff
(use-package ediff :defer t
  :init (setq ediff-diff-options "-w")  ; ignore whitespace
  :config
  (bind-keys :map ediff-mode-map
             ("j" . ediff-next-difference)
             ("k" . ediff-previous-difference)))

;; * files
;; ** autorevert
(use-package autorevert                 ; Auto revert to external modifications
  :delight autorevert-mode
  :init
  (setq global-auto-revert-non-file-buffers t) ; auto refresh buffer
  (global-auto-revert-mode t))

;; ** dired
(use-package dired :ensure nil          ; Emacs file browser
  :bind (("C-x d" . dired-jump)
         ("C-x C-d" . list-directory))
  :init
  (setq
   dired-auto-revert-buffer t          ; auto revert dired buffer on visit
   dired-backup-overwrite 'always      ; always make backup before overwrite
   dired-dwim-target t                 ; target other dired directory if exists
   dired-isearch-filenames 'dwim       ; isearch filenames if point on filename
   dired-no-confirm '(copy move symlink) ; don't confirm these operations
   dired-recursive-copies 'always        ; recursive copy by default
   dired-recursive-deletes 'top          ; confirm recursive delete
   dired-listing-switches "-lha")        ; human-readable listing
  (add-to-list 'evil-emacs-state-modes 'dired-mode) ; Evil initial state
  :config
  (use-package dired+                   ; Dired extensions and syntax highlight
    :init (setq diredp-dwim-any-frame-flag t) ; allow dwim target other frame
    :config (dired-omit-mode t))              ; omit uninteresting files
  (bind-keys :map dired-mode-map
             ("C-M-u" . dired-up-directory)
             ("C-w" . wdired-change-to-wdired-mode)))

;; ** pandoc
(use-package pandoc-mode                ; Markup conversion tool
  :delight pandoc-mode '(:eval (concat " Π:" (pandoc--get 'write)))
  :bind ("C-c C-p" . pandoc-mode))

;; ** real-auto-save
(use-package real-auto-save    ; Auto save buffers
  :delight real-auto-save-mode " α"
  :init (real-auto-save-mode t))

;; ** recentf
(use-package recentf                    ; List recent files
  :init
  (setq
   recentf-max-saved-items 300          ; increase history size
   recentf-auto-cleanup 600             ; cleanup files after 10 minutes
   recentf-exclude '("COMMIT_EDITMSG")
   recentf-save-file (concat my-dir "recentf"))
  (recentf-mode t))

;; ** uniquify
(use-package uniquify :ensure nil       ; Distinguish buffers with same name
  :init (setq uniquify-buffer-name-style 'forward
              uniquify-trailing-separator-p t)) ; add separator to dired names

;; * applications
;; ** calendar
(use-package calendar :defer t
  :init (setq calendar-date-style 'european)) ; logical date display please

;; ** doc-view
(use-package doc-view :ensure nil :defer t   ; In-buffer document viewer
  :init (setq doc-view-continuous t)
  :config
  (bind-keys :map doc-view-mode-map
             ("j" . doc-view-next-line-or-next-page)
             ("k" . doc-view-previous-line-or-previous-page)
             ("q" . kill-this-buffer)))

;; ** -elim
(use-package garak :disabled t          ; ELIM messenger front-end
  :enabled nil
  :load-path (concat my-dir-packages "elim"))

;; ** comint
(use-package comint :ensure nil :defer t
  :init (setq
         comint-completion-addsuffix t  ; add space/slash after file completion
         comint-input-ignoredups t      ; ignore duplicates in command history
         comint-scroll-to-bottom-on-input t
         comint-completion-autolist t)
  :config
  (setenv "PAGER" "cat")

  (advice-add
   #'comint-previous-matching-input
   :around
   (lambda(orig-func args)
     "Suppress 'History item:' messages."
     (let ((old-message (symbol-function 'message)))
       (unwind-protect
           (progn (fset 'message 'ignore)
                  (apply orig-func args))
         (fset 'message old-message))))))

;; ** eshell
(use-package eshell                     ; Emacs shell
  :bind (("<f12>" . eshell))
  :functions my-eshell-prompt
  :defines (eshell-cmpl-ignore-case
            eshell-highlight-prompt
            eshell-banner-message
            eshell-directory-name
            eshell-prompt-regexp
            eshell-prompt-function)
  :init (setq
         ;; eshell-prompt-regexp "^[^#$\n]* [#$] "
         eshell-buffer-shorthand t            ; buffer shorthand: echo foo > #'buffer
         eshell-highlight-prompt nil
         ;; eshell-prompt-function #'my-eshell-prompt
         eshell-directory-name (expand-file-name my-dir "eshell/")
         eshell-cmpl-ignore-case t
         eshell-banner-message (my-with-face-color
                                (shell-command-to-string "fortune")
                                'term-color-yellow))
  (add-to-list 'eshell-modules-list 'eshell-smart)

  :config
  ;; *** with-face-color
(defmacro my-with-face-color (str face &rest args)
  "Call `propertize' on STR with the foreground value of FACE and ARGS."
  (apply 'propertize
         str
         'face `(:foreground (face-attribute ,face :foreground)
                             args)))

  ;; *** eshell-prompt-extras
  (use-package eshell-prompt-extras
    :init
    (use-package virtualenvwrapper      ; Show Python venv info in prompt
      :config (venv-initialize-interactive-shells))
    (setq
     eshell-highlight-prompt nil
     eshell-prompt-function #'epe-theme-lambda))

  (defun my-eshell-prompt ()
    (string-join
     ;; whether last command was successful
     ;; (my-with-face-color
     ;;  (int-to-string eshell-last-command-status)
     ;;  'term-color-magenta)

     ;; current working dir
     (my-with-face-color
      (if (fboundp #'sml/replacer)
          ;; Use `smart-mode-line' replacers if possible
          ;; trailing slash to match with `sml/replacer-regexp-list'
          (sml/replacer (concat (abbreviate-file-name (eshell/pwd)) "/"))
        (abbreviate-file-name (eshell/pwd)))
      'term-color-white
      'bold)

     ;; current git branch
     ;; TODO display dirty, stashed, staged states
     (when (and (fboundp #'magit-get-current-branch) (magit-get-current-branch))
       (my-with-face-color (format "(%s)" (magit-get-current-branch))
                           'term-color-cyan))

     ;; end mark
     (if (= (user-uid) 0)
         (my-with-face-color "#" 'term-color-red)
       (my-with-face-color "$" 'term-color-cyan))
     ""
     " ")))               ; show extended output in other buffer

;; ** malyon
(use-package malyon :ensure nil :defer t); Z-machine text-based-adventure reader

;; * languages
;; ** org
(use-package org
  :delight org-indent-mode
  :defines (org-export-in-background org-odt-preferred-output-format)
  :init
  (setq
   org-edit-src-content-indentation 0   ; no initial indent for source code
   org-src-preserve-indentation t       ; preserve source block indentation
   org-src-strip-leading-and-trailing-blank-lines t
   org-clock-persist t                  ; save clock and clock history on exit
   org-clock-in-resume t                ; resume if clocking in with open clock
   org-cycle-separator-lines 1          ; let one line be a separator
   org-adapt-indentation nil            ; don't adapt indentation
   org-imenu-depth 3                    ; larger imenu depth
   org-special-ctrl-a/e t               ; begin/end of line skips tags & stars
   org-special-ctrl-k t                 ; kill lines depending on org context
   org-return-follows-link t            ; follow links with RET
   org-catch-invisible-edits 'smart     ; smart editing of hidden things
   org-todo-keywords '((sequence "☐" "☒"))
   org-modules '(org-docview org-info org-gnus org-inlinetask)
   org-export-backends '(ascii html odt taskjuggler)
   org-odt-preferred-output-format 'doc
   org-startup-folded t                 ; start buffers with folded headers
   org-src-fontify-natively t           ; syntax highlight code in org buffer
   org-list-allow-alphabetical t)       ; allow single-char alphabetical lists

  (bind-keys :map org-mode-map
             ("C-1" . org-clock-in)
             ("C-2" . org-clock-out)
             ("S-<return>" . org-insert-heading-after-current))
  (evil-define-key 'normal org-mode-map "RET" #'org-insert-heading)

  :config
  (use-package org-plus-contrib
    :config
    ;; *** org/ox-taskjuggler
    (use-package ox-taskjuggler :ensure nil
      :init (setq
             org-taskjuggler-default-reports "
macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    '''Precursors: '''
    <-query attribute='precursors'->

    '''Followers: '''
    <-query attribute='followers'->
    ->8-
]

textreport report \"Plan\" {
  formats html
  center -8<-
    <[report id=\"plan\"]>
  ->8-
}

taskreport plan \"\" {
  headline \"Project Plan\"
  columns name, start, end, effort, chart { scale day width 1500 ${TaskTip} }
}"))
    :config
    (defun my-org-tj-add-project-options (orig-func &rest args)
      (let ((options '("timeformat \"%H-%d\""
                       "timingresolution 15 min")))
        (format "%s\n  %s\n}\n"
                (substring (apply orig-func args) 0 -2)
                (string-join options "\n  "))))

    (advice-add #'org-taskjuggler--build-project :around
                #'my-org-tj-add-project-options))

  ;; **** org/evil
  (use-package evil-org                 ; Evil org-mode bindings
    :delight evil-org-mode
    :init
    (evil-define-key 'normal evil-org-mode-map
      "\t" #'org-back-to-heading))

  ;; *** org/settings
  (defun my-org-insert-quote ()
    "Insert an org quote block and position point for editing."
    (interactive)
    (insert "#+BEGIN_QUOTE\n\n#+END_QUOTE\n")
    (forward-line -2)
    (if (fboundp 'evil-insert-state) (evil-insert-state nil)))

  (defun org-dblock-write:git-log-view (params)
    "Display a git commit log according to PARAMS."
    (let ((repo (expand-file-name
                 ".git" (or (plist-get params :repo)
                            (file-name-directory (buffer-file-name)))))
          (format (or (format "--format='%s'" (plist-get params :format)) ""))
          (trunc-p (plist-get params :trunc))
          (args (or (string-join (plist-get params :args) " ") "")))
      (let ((output (shell-command-to-string
                     (format "git --git-dir='%s' log %s %s" repo format args))))
        (when trunc-p
          (setq output (replace-regexp-in-string "\\.\\." "" output)))
        (insert output))))

  (set-face-attribute 'org-table nil
                      :family "Input Mono Condensed")
  (set-face-attribute 'org-todo nil
                      :height 'unspecified
                      :inherit 'variable-pitch)
  (set-face-attribute 'org-done nil
                      :inherit 'org-todo))

;; ** BBCode
(use-package bbcode-mode :defer t)

;; ** generic-x
(use-package generic-x :ensure nil      ; Collection of generic modes
  :config
  (setq generic-extras-enable-list
        (append generic-extras-enable-list generic-mswindows-modes))

  ;; *** conkyrc
  (use-package conkyrc-mode :disabled t ; System monitor setup language
    :load-path "~/.emacs.d/elisp/" :ensure nil))

;; ** gitignore
(use-package gitignore-mode :defer t)

;; ** lisp
;; *** eldoc-mode
(use-package eldoc                      ; Documentation in echo area
  :delight eldoc-mode
  :init
  (setq eldoc-idle-delay 0.3)
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode))

;; *** highlight-quoted
(use-package highlight-quoted  ; Faces for lisp quotes and quoted symbols
  :init (add-hook 'emacs-lisp-mode-hook #'highlight-quoted-mode))

;; *** elisp-slime-nav
(use-package elisp-slime-nav            ; Navigate elisp documentation
  :delight elisp-slime-nav-mode
  :init (add-hook 'emacs-lisp-mode-hook #'turn-on-elisp-slime-nav-mode)
  :config
  (evil-define-key 'normal elisp-slime-nav-mode-map
    "K" #'elisp-slime-nav-describe-elisp-thing-at-point
    "gd" #'elisp-slime-nav-find-elisp-thing-at-point))


;; ** lua
(use-package lua-mode :defer t)

;; ** markdown
(use-package markdown-mode :defer t)

;; ** python
(use-package python :defer t
  :init (setq python-shell-interpreter "python3") ; use Python 3
  :config
  ;; *** python/elpy
  (use-package elpy :init (elpy-enable)))

;; ** sh
(use-package sh-script :defer t
  :init (setq sh-learn-basic-offset t         ; guess indentation when obvious
              sh-basic-offset 2))             ; indent by 2

;; ** vimrc
;; VimScript major mode. Also for editing Pentadactyl config files.
(use-package vimrc-mode :mode "[._]?pentadactylrc$" "\\.penta$" :defer t)

;; ** vbnet
(use-package vbnet-mode :defer t :ensure nil
  :init (setq vbnet-funcall-face 'font-lock-function-name-face
              vbnet-namespace-face 'font-lock-preprocessor-face))

;; ** -javascript
(use-package js2-mode :defer t :disabled t
  :mode "\\.js$"
  :init
  (defalias 'javascript-generic-mode #'js2-mode)
  (setq-default js-indent-level 2))

;; ** web
(use-package web-mode :defer t
  :mode ("\\.html?$" "\\.s?css$")
  :init (setq
         web-mode-enable-block-face t
         web-mode-enable-part-face t
         web-mode-enable-comment-keywords t
         web-mode-enable-current-element-highlight t
         web-mode-enable-current-column-highlight t
         web-mode-css-indent-offset 2
         web-mode-code-indent-offset 2
         web-mode-markup-indent-offset 2)
  :config (add-hook 'web-mode-hook #'rainbow-mode))

;;; init.el ends here
;; Local Variables:
;; outline-regexp: " *;; ?[*]\\{1,8\\}"
;; End:
